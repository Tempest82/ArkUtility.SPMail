(Licence Notice (LGPLv3))

This file/service/feature is part of ArkUtility SPMail.

ArkUtility SPMail is free software: you can redistribute it and / or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ArkUtility SPMail is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ArkUtility SPMail.If not, see < http://www.gnu.org/licenses/>.


Version 1.0
Primary functionality to accept an HTML email and embed inline images as they are found in the email by searching a sharepoint library within the web application.
- Added SendMail RESTful Web Service accepts POST - "/_vti_bin/ArkUtility.SPMail/mail.svc/Send"
- Added Dll version RESTful Web Service accepts GET - "/_vti_bin/ArkUtility.SPMail/mail.svc/GetInstalledFullName"
- Added Licese version RESTful Web Service accepts GET - "/_vti_bin/ArkUtility.SPMail/mail.svc/License"
- Added Sharepoint ULS logging into the service
- Page at  "/_layouts/15/ArkUtility.SPMail/index.aspx" provides test details and license information without loading the SharePoint Masterpages
- Support for Large emails (>50K requests) (Required Custom Service Factory)
- Added AdditionalImageLibraryUrls to allow an array of additional libraries to be checked for matching images. Libraries are processed in the order listed to attempt to find a matching filename.
- Log Lists must have the field "EmailResult" and title available to log. 
- ULS and Log lists will handle email message Successes/Failures by logging the following : Success, UTC Datetime, Subject, Addressees, Server, User, Error Stack.

*****Installation and Removal Instructions *******
The included Setup2013.exe can be used to install and retract 
OR you can use the following SharePoint Management Shell (PowerShell) commands in the event that software fails( software provided as-is, see Setup Configuration Readme)

Initial Deployment Process – SharePoint Management Shell
The following steps are applicable to a clean install of the product.  They would also be applicable if the product were to be retracted and redeployed.
•	Open SharePoint 2013 Management Shell
•	Run the following command from the directory the desired WSP file is located in
Add-SPSolution "{yourPath}\ArkUtility.SPMail.wsp"
•	Run the following command.
Install-SPSolution -Identity ArkUtility.SPMail.wsp http://{yourWebApplicationUrl/ -GACDeployment

Removal Process
•	Open SharePoint 2013 Management Shell
•	Run the following command.
Uninstall-SPSolution -Identity "ArkUtility.SPMail.wsp" -WebApplication yourWebApplicationUrl
•	Run the following command to complete the SharePoint removal.
Remove-SPSolution -Identity "ArkUtility.SPMail.wsp"


****Example of quick generation via code if the types are customized.****

JSON Serialized Email
Generation Method using Visual Studio C# Interactive window when initialized with the project:

using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using ArkUtility.SPMail.Infrastructure;
MemoryStream ms = new MemoryStream();
DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EmailMessage));
EmailMessage em = new EmailMessage() { To = "To@Address", Cc = "Cc@Address", Bcc = "Bcc@Address", MessageSubject = "Subject", MessageBody = "Body Goes Here\r\nMore here\r\n And More here",  From = "noreply@location.com", ImageLibraryUrls = new []{ "https://thishost/site/web/library/", "https://thishost/site2/web2/library2/" }, ShouldEmbedImages = true, ShouldWrapBodyWithHtml = true, LogListUrl = "https://thishost/site/web/LogList/",  };
ser.WriteObject(ms, em);
ms.Position = 0;
StreamReader sr = new StreamReader(ms);
Console.WriteLine("JSON Email Object: ");
Console.WriteLine(sr.ReadToEnd());
OUTPUT:
JSON Email Object: 
{"Bcc":"Bcc@Address","Cc":"Cc@Address","From":"noreply@location.com","ImageLibraryUrls":["https://thishost/site/web/library/","https://thishost/site2/web2/library2/"],"LogListUrl":"https://thishost/site/web/LogList/","MessageBody":"Body Goes Here\u000d\u000aMore here\u000d\u000a And More here","MessageSubject":"Subject","ShouldEmbedImages":true,"ShouldWrapBodyWithHtml":true,"To":"To@Address"}



JSON Email Response
Generation Method using Visual Studio C# Interactive window when initialized with the project:

using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using ArkUtility.SPMail.Infrastructure;

MemoryStream ms = new MemoryStream();
DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(SendResponse));
SendResponse sendResponse = new SendResponse() { Successful=true, Message="Successful", Status = "Successful" };
ser.WriteObject(ms, sendResponse );
ms.Position = 0;
StreamReader sr = new StreamReader(ms);
Console.WriteLine("JSON Send Response Object: ");
Console.WriteLine(sr.ReadToEnd());

OUTPUT
JSON Send Response Object: 
{"Message":"Successful","Status":"Successful","Successful":true}
